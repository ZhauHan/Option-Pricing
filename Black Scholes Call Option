{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6205383,"sourceType":"datasetVersion","datasetId":3563054}],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install QuantLib\n!pip install yfinance\n!pip install scikit-learn","metadata":{"execution":{"iopub.status.busy":"2024-05-06T14:39:05.040300Z","iopub.execute_input":"2024-05-06T14:39:05.040768Z","iopub.status.idle":"2024-05-06T14:40:23.458254Z","shell.execute_reply.started":"2024-05-06T14:39:05.040728Z","shell.execute_reply":"2024-05-06T14:40:23.456588Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import QuantLib as ql\nimport yfinance as yf\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np","metadata":{"execution":{"iopub.status.busy":"2024-05-06T14:40:23.461092Z","iopub.execute_input":"2024-05-06T14:40:23.461531Z","iopub.status.idle":"2024-05-06T14:40:25.205056Z","shell.execute_reply.started":"2024-05-06T14:40:23.461491Z","shell.execute_reply":"2024-05-06T14:40:25.203659Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def collect_market_data(symbol, start, end):\n    tickerData = yf.Ticker(symbol)\n    tickerDf = tickerData.history(period='1d', start=start, end=end)\n    series = tickerDf['Close']\n    series.name = symbol\n    series.index = series.index.tz_localize(None)\n    return series\n\ndef get_growth_volitility(series):\n    \"\"\"\n    Calculate the mean growth rate (mu) and volatility (sigma) of a stock's closing price.\n\n    Parameters:\n    series (pandas.Series): A Series containing the historical closing prices of a stock. \n\n    Returns:\n    mu (float): The mean growth rate of the stock's closing price.\n    sigma (float): The annualized standard deviation (volatility) of the stock's log returns.\n    \"\"\"\n    # Calculate the log returns\n    log_returns = np.log(series / series.shift(1))\n    # Calculate the mean growth rate (mu)\n    mu = log_returns.mean()\n    # Calculate the annualized volatility (sigma)\n    sigma = log_returns.std() * np.sqrt(252)  # Assuming 252 trading days in a year\n    return mu, sigma\n\ndef split_data_by_percentage(df, percentage):\n    \n    split_index = int(len(df) * percentage/100)\n\n    # Split the data into training and test sets\n    train = df.iloc[:split_index]\n    test = df.iloc[split_index:]\n    \n    return train, test\n\ndef predict_future_prices(train_prices, test_prices,train_interests, mean, volatility, model='BS'):\n    risk_free_rate = train_interests.iloc[-1]/100 # interest divide by 100 to get percentage\n    underlying_price = train_prices.iloc[-1]\n    calculation_date_timestamp = train_prices.index[0]\n    calc_day, calc_month, calc_year = calculation_date_timestamp.day, calculation_date_timestamp.month, calculation_date_timestamp.year\n\n    day_count = ql.Actual365Fixed()\n    calender = ql.UnitedStates(ql.UnitedStates.GovernmentBond)\n\n    calculation_date = ql.Date(calc_day, calc_month, calc_year)  # Replace with your actual calculation date\n    ql.Settings.instance().evaluationDate = calculation_date\n    \n    spot_handle = ql.QuoteHandle(ql.SimpleQuote(underlying_price))\n    flat_ts = ql.YieldTermStructureHandle(ql.FlatForward(calculation_date, risk_free_rate, day_count))\n    dividend_yield = ql.YieldTermStructureHandle(ql.FlatForward(calculation_date, 0.0, day_count))  # Assuming no dividends\n    flat_vol_ts = ql.BlackVolTermStructureHandle(ql.BlackConstantVol(calculation_date, calender, volatility, day_count))\n    bsm_process = ql.BlackScholesMertonProcess(spot_handle, dividend_yield, flat_ts, flat_vol_ts)\n    \n    # Set up the random number generator\n    test_set_days = len(test_prices) - 1\n    rng = ql.GaussianRandomSequenceGenerator(ql.UniformRandomSequenceGenerator(test_set_days, ql.UniformRandomGenerator()))  # Assuming 252 trading days in a year\n    seq = ql.GaussianPathGenerator(bsm_process, 1.0, test_set_days, rng, False)  # Assuming 252 trading days in a year\n    \n    # Generate the path\n    path = seq.next().value()\n\n    daily_prices = list(path)\n    \n    date_index = test_prices.index\n    series = pd.Series(daily_prices, index=date_index)\n    series.name = f\"predicted {test_price.name}\"\n    return series\n\ndef calculate_option_prices(test_data, interest_rate, std_dev, exercise_price, maturity_in_years, fulldata, train_len):\n    day_count = ql.Actual365Fixed()\n    calendar = ql.UnitedStates(ql.UnitedStates.NYSE)\n\n    option_prices = []\n\n    for i in range(len(test_data)):\n        # Set the calculation date to be the date from the test data\n        calculation_date = ql.Date(test_data.index[i].day, test_data.index[i].month, test_data.index[i].year)\n        ql.Settings.instance().evaluationDate = calculation_date\n\n        # Set maturity date to be maturity_in_years years from the calculation_date\n        maturity_date = calculation_date + ql.Period(maturity_in_years, ql.Years)\n\n        # Update the standard deviation based on the test data up to this point\n        if i > 0:\n            up_to_date_data = fulldata[:i + train_len]\n            log_returns = np.log(up_to_date_data/ up_to_date_data.shift(1))\n            std_dev = np.std(log_returns)\n        \n        #get interest rate with conditions\n        if i < len(interest_rate):\n            current_interest_rate = interest_rate.iloc[i]\n        else:\n            current_interest_rate = interest_rate.iloc[-1]\n\n        # Set up the BSM process\n        spot_handle = ql.QuoteHandle(ql.SimpleQuote(test_data.iloc[i]))\n        flat_ts = ql.YieldTermStructureHandle(ql.FlatForward(calculation_date, current_interest_rate, day_count))\n        dividend_yield = ql.YieldTermStructureHandle(ql.FlatForward(calculation_date, 0.0, day_count))\n        flat_vol_ts = ql.BlackVolTermStructureHandle(ql.BlackConstantVol(calculation_date, calendar, std_dev, day_count))\n        bsm_process = ql.BlackScholesMertonProcess(spot_handle, dividend_yield, flat_ts, flat_vol_ts)\n        \n        # Define the option\n        payoff = ql.PlainVanillaPayoff(ql.Option.Call, exercise_price)\n        exercise = ql.EuropeanExercise(maturity_date)\n        european_option = ql.VanillaOption(payoff, exercise)\n\n        # Calculate the option price\n        european_option.setPricingEngine(ql.AnalyticEuropeanEngine(bsm_process))\n        bs_price = european_option.NPV()\n\n        option_prices.append(bs_price)\n\n    # Create a DataFrame with the option prices\n    option_prices_df = pd.DataFrame(option_prices, index=test_data.index, columns=['Option Price'])\n\n    return option_prices_df","metadata":{"execution":{"iopub.status.busy":"2024-05-06T14:40:25.206685Z","iopub.execute_input":"2024-05-06T14:40:25.207329Z","iopub.status.idle":"2024-05-06T14:40:25.237535Z","shell.execute_reply.started":"2024-05-06T14:40:25.207292Z","shell.execute_reply":"2024-05-06T14:40:25.236272Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define the ticker symbol\ntickerSymbol = 'NVDA'\n\n# Get historical prices for this ticker\nmarket_data = collect_market_data(tickerSymbol, '2012-1-1', '2022-1-1')\n# See your data\nprint(market_data)\n\ntickerSymbol_ir = '^TNX'\nir_series = collect_market_data(tickerSymbol_ir, '2012-1-1', '2022-1-1')\n\nprint(ir_series)","metadata":{"execution":{"iopub.status.busy":"2024-05-06T15:22:41.699379Z","iopub.execute_input":"2024-05-06T15:22:41.700105Z","iopub.status.idle":"2024-05-06T15:22:42.093950Z","shell.execute_reply.started":"2024-05-06T15:22:41.700058Z","shell.execute_reply":"2024-05-06T15:22:42.092492Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#align data with inner join to preserve both dates\naligned_ir, aligned_market_data = ir_series.align(market_data, join='inner')","metadata":{"execution":{"iopub.status.busy":"2024-05-06T15:22:42.449826Z","iopub.execute_input":"2024-05-06T15:22:42.450246Z","iopub.status.idle":"2024-05-06T15:22:42.458503Z","shell.execute_reply.started":"2024-05-06T15:22:42.450216Z","shell.execute_reply":"2024-05-06T15:22:42.456780Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"growth, volatility = get_growth_volitility(aligned_market_data)","metadata":{"execution":{"iopub.status.busy":"2024-05-06T15:22:43.634774Z","iopub.execute_input":"2024-05-06T15:22:43.635223Z","iopub.status.idle":"2024-05-06T15:22:43.643250Z","shell.execute_reply.started":"2024-05-06T15:22:43.635189Z","shell.execute_reply":"2024-05-06T15:22:43.641973Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_ir, test_ir = split_data_by_percentage(aligned_ir, 80)\ntrain_price, test_price = split_data_by_percentage(aligned_market_data,80)","metadata":{"execution":{"iopub.status.busy":"2024-05-06T15:22:44.111117Z","iopub.execute_input":"2024-05-06T15:22:44.111563Z","iopub.status.idle":"2024-05-06T15:22:44.117487Z","shell.execute_reply.started":"2024-05-06T15:22:44.111531Z","shell.execute_reply":"2024-05-06T15:22:44.116172Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"future_prices = predict_future_prices(train_price,test_price, train_ir, growth, volatility, 'BS')","metadata":{"execution":{"iopub.status.busy":"2024-05-06T15:22:44.521286Z","iopub.execute_input":"2024-05-06T15:22:44.521776Z","iopub.status.idle":"2024-05-06T15:22:44.530649Z","shell.execute_reply.started":"2024-05-06T15:22:44.521740Z","shell.execute_reply":"2024-05-06T15:22:44.529109Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"future_prices","metadata":{"execution":{"iopub.status.busy":"2024-05-06T15:22:44.875540Z","iopub.execute_input":"2024-05-06T15:22:44.876066Z","iopub.status.idle":"2024-05-06T15:22:44.887150Z","shell.execute_reply.started":"2024-05-06T15:22:44.876029Z","shell.execute_reply":"2024-05-06T15:22:44.885480Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nplt.plot(future_prices)\nplt.tight_layout()\nplt.title(future_prices.name)\nplt.xticks(rotation=30)\nplt.xlabel(\"Date\")\nplt.ylabel(\"Price(USD)\")\nplt.savefig(f'{future_prices.name}.png')","metadata":{"execution":{"iopub.status.busy":"2024-05-06T15:22:45.296887Z","iopub.execute_input":"2024-05-06T15:22:45.297366Z","iopub.status.idle":"2024-05-06T15:22:45.993857Z","shell.execute_reply.started":"2024-05-06T15:22:45.297326Z","shell.execute_reply":"2024-05-06T15:22:45.992809Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.plot(test_price)\nplt.title(f\"actual {test_price.name}\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Price(USD)\")\nplt.savefig(f'actual {test_price.name}.png')","metadata":{"execution":{"iopub.status.busy":"2024-05-06T15:22:45.998231Z","iopub.execute_input":"2024-05-06T15:22:45.999438Z","iopub.status.idle":"2024-05-06T15:22:46.534771Z","shell.execute_reply.started":"2024-05-06T15:22:45.999402Z","shell.execute_reply":"2024-05-06T15:22:46.533585Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import mean_squared_error","metadata":{"execution":{"iopub.status.busy":"2024-05-06T15:22:46.536773Z","iopub.execute_input":"2024-05-06T15:22:46.537501Z","iopub.status.idle":"2024-05-06T15:22:46.543490Z","shell.execute_reply.started":"2024-05-06T15:22:46.537468Z","shell.execute_reply":"2024-05-06T15:22:46.542012Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = calculate_option_prices(future_prices, test_ir, volatility, 20, 1, aligned_market_data, len(train_price))\ndf2 = calculate_option_prices(test_price, test_ir, volatility, 20, 1, aligned_market_data, len(train_price))","metadata":{"execution":{"iopub.status.busy":"2024-05-06T15:22:48.424250Z","iopub.execute_input":"2024-05-06T15:22:48.424955Z","iopub.status.idle":"2024-05-06T15:22:49.324562Z","shell.execute_reply.started":"2024-05-06T15:22:48.424905Z","shell.execute_reply":"2024-05-06T15:22:49.323327Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.iloc[0] - df2.iloc[0]","metadata":{"execution":{"iopub.status.busy":"2024-05-06T15:22:49.584742Z","iopub.execute_input":"2024-05-06T15:22:49.585311Z","iopub.status.idle":"2024-05-06T15:22:49.595770Z","shell.execute_reply.started":"2024-05-06T15:22:49.585276Z","shell.execute_reply":"2024-05-06T15:22:49.594532Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"errorpoints = []\n\nfor i in range(1,100):\n    errorpoints.append(mean_squared_error(df[:i], df2[:i])/i)\nplt.plot(errorpoints)\nplt.title(\"MSE between predicted and actual option prices\")\nplt.xlabel(\"days\")\nplt.ylabel(\"MSE(USD)\")\nplt.savefig(f\"MSE{aligned_market_data.name}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-05-06T15:22:58.261150Z","iopub.execute_input":"2024-05-06T15:22:58.261651Z","iopub.status.idle":"2024-05-06T15:22:58.925930Z","shell.execute_reply.started":"2024-05-06T15:22:58.261615Z","shell.execute_reply":"2024-05-06T15:22:58.924701Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def pipeline(symbol, start, end, percentage_split):\n    # Define the ticker symbol\n    tickerSymbol = symbol\n\n    # Get historical prices for this ticker\n    market_data = collect_market_data(tickerSymbol, start, end)\n\n    tickerSymbol_ir = '^TNX'\n    ir_series = collect_market_data(tickerSymbol_ir, start, end)\n    \n    #align data with inner join to preserve both dates\n    aligned_ir, aligned_market_data = ir_series.align(market_data, join='inner')\n    growth, volatility = get_growth_volitility(aligned_market_data)\n    \n    train_ir, test_ir = split_data_by_percentage(aligned_ir, percentage_split)\n    train_price, test_price = split_data_by_percentage(aligned_market_data, percentage_split)\n    \n    future_prices = predict_future_prices(train_price,test_price, train_ir, growth, volatility, 'BS')\n    \n    plt.plot(future_prices)\n    plt.tight_layout()\n    plt.title(future_prices.name)\n    plt.xticks(rotation=30)\n    plt.xlabel(\"Date\")\n    plt.ylabel(\"Price(USD)\")\n    plt.savefig(f'{future_prices.name}.png')\n    plt.show()\n    plt.clf()\n    \n    plt.plot(test_price)\n    plt.title(f\"actual {test_price.name}\")\n    plt.xlabel(\"Date\")\n    plt.ylabel(\"Price(USD)\")\n    plt.tight_layout()\n    plt.savefig(f'actual {test_price.name}.png')\n    plt.show()\n    plt.clf()\n    \n    df = calculate_option_prices(future_prices, test_ir, volatility, 20, 1, aligned_market_data, len(train_price))\n    df2 = calculate_option_prices(test_price, test_ir, volatility, 20, 1, aligned_market_data, len(train_price))\n\n    errorpoints = []\n\n    for i in range(1,100):\n        errorpoints.append(mean_squared_error(df[:i], df2[:i])/i)\n    plt.plot(errorpoints)\n    plt.title(\"MSE between predicted and actual option prices\")\n    plt.xlabel(\"days\")\n    plt.ylabel(\"MSE(USD)\")\n    plt.savefig(f\"MSE{aligned_market_data.name}\")\n    plt.show()\n    plt.clf()\n    ","metadata":{"execution":{"iopub.status.busy":"2024-05-06T15:07:27.311613Z","iopub.execute_input":"2024-05-06T15:07:27.312106Z","iopub.status.idle":"2024-05-06T15:07:27.328439Z","shell.execute_reply.started":"2024-05-06T15:07:27.312070Z","shell.execute_reply":"2024-05-06T15:07:27.326634Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"SYMBOLS = ['NVDA', 'BRK-A', 'JPM']\n\nfor symbol in SYMBOLS:\n    pipeline(symbol, '2012-1-1','2022-1-1', 80)\n    ","metadata":{"execution":{"iopub.status.busy":"2024-05-06T15:07:27.657718Z","iopub.execute_input":"2024-05-06T15:07:27.658206Z","iopub.status.idle":"2024-05-06T15:08:36.520958Z","shell.execute_reply.started":"2024-05-06T15:07:27.658171Z","shell.execute_reply":"2024-05-06T15:08:36.520019Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}